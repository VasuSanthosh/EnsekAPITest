// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EnsekAPITest
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("PurchaseEnergy", Description="Scenario to purchase energy and verify the details", SourceFile="PurchaseEnergy.feature", SourceLine=0)]
    public partial class PurchaseEnergyFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "PurchaseEnergy.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "PurchaseEnergy", "Scenario to purchase energy and verify the details", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void VerifyTheAvailablityOfTheEnergyPurchaseThemAndCheckForFebOrders(string energyType, string energyTypeId, string quantity, string unitType, string costPerUnit, string statuscode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Scenario"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("EnergyType", energyType);
            argumentsOfScenario.Add("EnergyTypeId", energyTypeId);
            argumentsOfScenario.Add("Quantity", quantity);
            argumentsOfScenario.Add("UnitType", unitType);
            argumentsOfScenario.Add("CostPerUnit", costPerUnit);
            argumentsOfScenario.Add("statuscode", statuscode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the availablity of the energy , purchase them and Check for Feb orders", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given(string.Format("the user checks the status of the {0}", energyType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.When(string.Format("the user try to purchase the {0} and {1}", energyTypeId, quantity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
 testRunner.Then(string.Format("the response should contain a valid Message {0} {1} {2} {3}  and units remaining", quantity, unitType, costPerUnit, statuscode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 9
 testRunner.And(string.Format("the order details {0},{1} are saved to the system", energyType, quantity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.And("the feb orders are verified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify the availablity of the energy , purchase them and Check for Feb orders, ga" +
            "s", new string[] {
                "Scenario"}, SourceLine=12)]
        public void VerifyTheAvailablityOfTheEnergyPurchaseThemAndCheckForFebOrders_Gas()
        {
#line 5
this.VerifyTheAvailablityOfTheEnergyPurchaseThemAndCheckForFebOrders("gas", "1", "1", "m³", "0.34", "200", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify the availablity of the energy , purchase them and Check for Feb orders, nu" +
            "clear", new string[] {
                "Scenario"}, SourceLine=12)]
        public void VerifyTheAvailablityOfTheEnergyPurchaseThemAndCheckForFebOrders_Nuclear()
        {
#line 5
this.VerifyTheAvailablityOfTheEnergyPurchaseThemAndCheckForFebOrders("nuclear", "2", "1", "MW", "0.56", "200", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify the availablity of the energy , purchase them and Check for Feb orders, el" +
            "ectric", new string[] {
                "Scenario"}, SourceLine=12)]
        public void VerifyTheAvailablityOfTheEnergyPurchaseThemAndCheckForFebOrders_Electric()
        {
#line 5
this.VerifyTheAvailablityOfTheEnergyPurchaseThemAndCheckForFebOrders("electric", "3", "1", "kWh", "0.47", "200", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify the availablity of the energy , purchase them and Check for Feb orders, oi" +
            "l", new string[] {
                "Scenario"}, SourceLine=12)]
        public void VerifyTheAvailablityOfTheEnergyPurchaseThemAndCheckForFebOrders_Oil()
        {
#line 5
this.VerifyTheAvailablityOfTheEnergyPurchaseThemAndCheckForFebOrders("oil", "4", "1", "Litres", "0.5", "200", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
